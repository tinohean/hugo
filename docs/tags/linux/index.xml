<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>linux on 半岛无风</title>
    <link>http://tinohean.top/tags/linux/</link>
    <description>Recent content in linux on 半岛无风</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 13 Apr 2017 21:01:45 +0800</lastBuildDate><atom:link href="http://tinohean.top/tags/linux/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>文件锁flock实现函数级别的调用控制</title>
      <link>http://tinohean.top/p/%E6%96%87%E4%BB%B6%E9%94%81flock%E5%AE%9E%E7%8E%B0%E5%87%BD%E6%95%B0%E7%BA%A7%E5%88%AB%E7%9A%84%E8%B0%83%E7%94%A8%E6%8E%A7%E5%88%B6/</link>
      <pubDate>Thu, 13 Apr 2017 21:01:45 +0800</pubDate>
      
      <guid>http://tinohean.top/p/%E6%96%87%E4%BB%B6%E9%94%81flock%E5%AE%9E%E7%8E%B0%E5%87%BD%E6%95%B0%E7%BA%A7%E5%88%AB%E7%9A%84%E8%B0%83%E7%94%A8%E6%8E%A7%E5%88%B6/</guid>
      <description>需求场景 有一个python上线部署脚本，兼具重启和健康检查功能，当上线重启的时候希望定时任务的健康检查不要触发任何重启操作。
同时，如果执行重启的时候碰到正在例行的健康检查，等待，直到健康检查结束。
即: 当一个脚本被多次调用时（非多线程），使用flock控制其内同一个函数的调用控制。
由于是多进程，线程锁是无效的，简单的使用python的fcntl模块的文件锁可以实现这个需求
关于文件锁 linux内核提供的一种进程之间资源防竞争机制。防止多进程间使用同一个共享资源时同时操作造成错乱。
鉴于linux中一切皆文件，所以文件锁有很多使用的空间。
锁分为劝告锁和强制锁。劝告锁只是一个非强制的约定规则，即可以不遵守。所以需要不同进程间约定协调。而强制锁则由内核进行强制约束。
此外，两种锁都可以有共享和排他的分类，分别是共享锁（读锁）和排他锁（写锁）
 共享锁:
我在它身上上了一把锁，你也可以过来读取它 排他锁:
我在它身上上了一把锁，我要写东西进去，这期间你不能读也不能写  关于两种锁的不同进程间的兼容关系
     进程B共享锁 进程B排他锁     进程A锁     无 是 是   共享锁 是 否   排他锁 否 否    强制锁由内核进行强制约束，当文件加有共享锁后，其他进程对文件对写操作会被内核阻止，当文件加有排他锁后，其他进程任何操作都会被阻止塞。阻止包括是堵塞-等待，非堵塞-立刻返回错误信号EAGAIN。
详细如下表
   当前锁 堵塞读 堵塞写 非堵塞读 非堵塞写     共享锁 正常读 堵塞 正常读 EAGAIN   排他锁 堵塞 堵塞 EAGAIN EAGAIN    注意：</description>
    </item>
    
  </channel>
</rss>
